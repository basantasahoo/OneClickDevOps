# ASP.NET Core

# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:

- task: DotNetCoreCLI@2
  displayName: Restore NuGet Packages 
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: Build the Solution
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Install .NET Core tools from local manifest'
  inputs:
    command: custom
    custom: tool
    arguments: 'restore'

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests - $(buildConfiguration)'
  inputs:
    command: 'test'
    arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    publishTestResults: true
    projects: '**/*.Tests.csproj'

#- task: DotNetCoreCLI@2
 # displayName: 'Create code coverage report'
  #inputs:
   # command: custom
    #custom: tool
    #arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'

#- task: PublishCodeCoverageResults@1
 # displayName: 'Publish code coverage report'
  #inputs:
   # codeCoverageTool: 'cobertura'
    #summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'


#- task: FortifyOnDemandStatic@8
 # inputs:
  #  FodConnection: '*************'
   # PolicyFailAction: '1'
   # FortifyProjects: '**************'
   # ReleaseOptions: '2'
   # EntitlementSelection: '1'
   # EntitlementPreference: '2'
   # OverrideScanSettings: '2'
   # InProgressScanActionType: '0'
   # RemediationScanPreference: '0'
   # BuildType: 'msbuild'


- task: DotNetCoreCLI@2
  displayName: 'Fortify SAST Scan'
  inputs:
    command: 'publish'
    
- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
    zipAfterPublish: true


- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: packagefeed'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'packagefeed'
    publishLocation: 'Container'
    
